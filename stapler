#!/usr/bin/env ruby
require "thor"
require "prawn"
require File.expand_path("../extensions/prawn_document", __FILE__)
require File.expand_path("../extensions/string", __FILE__)

class Stapler < Thor
  desc "get INPUT_PDF [OUTPUT_PDF] PAGE_NUMBERS", "Copy the specified page in INPUT_PDF to a new OUTPUT_PDF."
  def get(*args)
    pdf_temp_nb_pages = Prawn::Document.new(:template => args[0]).page_count

    case
      # stapler get input.pdf
      when args.length == 1
        raise ArgumentError, "Not enough arguments."
        
      # stapler get input.pdf output.pdf
      when args.length == 2 && args[1].include?(".pdf")
        raise ArgumentError, "Not enough arguments."
        
      # stapler get input.pdf 4..42
      when args.length == 2 && args[1].is_range
        range = args[1].to_range
      
      # stapler get input.pdf 4
      when args.length == 2 && args[1].is_int
        range = Range.new(args[1].to_i, args[1].to_i)
      
      # stapler get input.pdf output.pdf 4..42
      when args.length == 3 && args[1].include?(".pdf") && args[2].is_range
        range = args[2].to_range
        
      # stapler get input.pdf output.pdf 4
      when args.length == 3 && args[1].include?(".pdf") && args[2].is_int
        range = Range.new(args[2].to_i, args[2].to_i)
        
      else
        raise ArgumentError, "Invalid arguments."
    end

    Prawn::Document.generate(args[1].include?(".pdf") ? args[1] : "output.pdf", :skip_page_creation => true) do |output|
      (range).each do |i|
          output.start_new_page(:template => args[0], :template_page => i)
      end
    end
  end

  desc "insert INPUT_PDF INSERT_PDF [OUTPUT_PDF] PAGE_NUMBER", "Insert INSERT_PDF before the specified PAGE_NUMBER."
  def insert(*args)
    pdf_temp_nb_pages = Prawn::Document.new(:template => args[0]).page_count + 1
    
    case
      # stapler insert input.pdf
      when args.length == 1
        raise ArgumentError, "Not enough arguments."
        
      # stapler insert input.pdf insert.pdf
      when args.length == 2 && args[1].include?(".pdf")
        raise ArgumentError, "Not enough arguments."
        
      # stapler insert input.pdf insert.pdf output.pdf
      when args.length == 3 && args[1].include?(".pdf") && args[2].include?(".pdf")
        raise ArgumentError, "Not enough arguments."
      
      # stapler insert input.pdf insert.pdf 4
      when args.length == 3 && args[1].include?(".pdf") && args[2].is_int
        insert = args[2].to_i
        
      # stapler insert input.pdf insert.pdf output.pdf 4
      when args.length == 4 && args[1].include?(".pdf") && args[2].include?(".pdf") && args[3].is_int
        insert = args[3].to_i
        
      else
        raise ArgumentError, "Invalid arguments."
    end
    
    Prawn::Document.generate(args[2].include?(".pdf") ? args[2] : "asdfoutput.pdf", :skip_page_creation => true) do |output|
      (1..pdf_temp_nb_pages).each do |i|
          if i < insert
            output.start_new_page(:template => args[0], :template_page => i)
          elsif i == insert
            output.concat(args[1])
          elsif i > insert
            output.start_new_page(:template => args[0], :template_page => i - 1)
          end
      end
    end   
  end

  desc "join INPUT_PDFS OUTPUT_PDF", "Merge specified INPUT_PDFS into a single OUTPUT_PDF. "
  def join(*pdf_files)
    Prawn::Document.generate(pdf_files[pdf_files.length - 1], :skip_page_creation => true) do |output|
      pdf_files.each do |pdf|
        output.concat(pdf)
      end
    end
  end
  
  desc "remove INPUT_PDF [OUTPUT_PDF] PAGE_NUMBERS", "Remove the specified pages."
  def remove(*args)
    pdf_temp_nb_pages = Prawn::Document.new(:template => args[0]).page_count
    
    case
      # stapler remove input.pdf
      when args.length == 1
        raise ArgumentError, "Not enough arguments."
        
      # stapler remove input.pdf output.pdf
      when args.length == 2 && args[1].include?(".pdf")
        raise ArgumentError, "Not enough arguments."
        
      # stapler remove input.pdf 4..42
      when args.length == 2 && args[1].is_range
        remove = args[1].to_range
      
      # stapler remove input.pdf 4
      when args.length == 2 && args[1].is_int
        remove = Range.new(args[1].to_i, args[1].to_i)
      
      # stapler remove input.pdf output.pdf 4..42
      when args.length == 3 && args[1].include?(".pdf") && args[2].is_range
        remove = args[2].to_range
        
      # stapler remove input.pdf output.pdf 4
      when args.length == 3 && args[1].include?(".pdf") && args[2].is_int
        remove = Range.new(args[2].to_i, args[2].to_i)
        
      else
        raise ArgumentError, "Invalid arguments."
    end
    
    Prawn::Document.generate(args[1].include?(".pdf") ? args[1] : "output.pdf", :skip_page_creation => true) do |output|
      (1..pdf_temp_nb_pages).each do |i|
          if !(remove.include?(i))
            output.start_new_page(:template => args[0], :template_page => i)
          end
      end
    end    
  end
  
  desc "split INPUT_PDF", "Split the pages of INPUT_PDF into multiple PDFs."
  def split(pdf_file)
    pdf_temp_nb_pages = Prawn::Document.new(:template => pdf_file).page_count
    pdf_name_prefix = pdf_file.gsub(/.pdf/, "") + "_page_"

    (1..pdf_temp_nb_pages).each do |i|
      Prawn::Document.generate(pdf_name_prefix + i.to_s + ".pdf", :skip_page_creation => true) do |output|
        output.start_new_page(:template => pdf_file, :template_page => i)
      end
    end
  end
end

if $0 == __FILE__
  Stapler.start(ARGV)
end